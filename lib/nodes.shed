module shed.compiler.nodes;

members {
    unit UnitNode,
    number NumberNode,
    boolean BooleanNode,
    string StringNode,
    variableReference VariableReferenceNode,
    ref VariableReferenceNode,
    ifThenElse IfThenElseNode,
    call CallNode,
    expressionStatement ExpressionStatementNode,
    moduleNode ModuleNode,
    Node,
    UnitNode,
    NumberNode,
    BooleanNode,
    StringNode,
    VariableReferenceNode,
    IfThenElseNode,
    CallNode,
    ExpressionStatementNode,
    ModuleNode
}

import structs;

// TODO: should be an interface
def Node class() => {
}

def UnitNode class() => {
    members {
        struct fun() => structs.create(UnitNode, emptyList)
    }
}

def NumberNode class(value: Double) => {
    members {
        value fun() => value,
        struct fun() => structs.create(NumberNode, listOf(value))
    }
}

def BooleanNode class(value: Boolean) => {
    members {
        value fun() => value,
        struct fun() => structs.create(BooleanNode, listOf(value))
    }
}

def StringNode class(value: String) => {
    members {
        value fun() => value,
        struct fun() => structs.create(StringNode, listOf(value))
    }
}

def VariableReferenceNode class(identifier: String) => {
    members {
        identifier fun() => identifier,
        struct fun() => structs.create(VariableReferenceNode, listOf(identifier))
    }
}

def IfThenElseNode class(condition: ExpressionNode, trueValue: ExpressionNode, falseValue: ExpressionNode) => {
    members {
        condition fun() => condition,
        trueValue fun() => trueValue,
        falseValue fun() => falseValue,
        struct fun() => structs.create(IfThenElseNode, listOf(condition, trueValue, falseValue))
    }
}

def CallNode class(callee: ExpressionNode, args: List[ExpressionNode]) => {
    members {
        callee fun() => callee,
        args fun() => args,
        struct fun() => structs.create(CallNode, listOf(callee, args))
    }
}

def ExpressionStatementNode class(expression: ExpressionNode) => {
    members {
        expression fun() => expression,
        struct fun() => structs.create(ExpressionStatementNode, listOf(expression))
    }
}

def ModuleNode class(statements: List[StatementNode]) => {
    members {
        statements fun() => statements,
        struct fun() => structs.create(ModuleNode, listOf(statements))
    }
}
