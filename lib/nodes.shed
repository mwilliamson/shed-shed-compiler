package shed.compiler;

import structs;

public val nodes = object {
    // TODO: should be an interface
    public def Node class() => {
    }
    
    public def unit fun() => UnitNode();
    public def number fun(value: String) => NumberNode(value);
    public def boolean fun(value: Boolean) => BooleanNode(value);
    public def string fun(value: String) => StringNode(value);
    public def variableReference fun(identifier: String) => VariableReferenceNode(identifier);
    
    public def UnitNode class() => {
        members {
            struct fun() => structs.create(UnitNode, emptyList)
        }
    }
    
    public def NumberNode class(value: Double) => {
        members {
            value fun() => value,
            struct fun() => structs.create(NumberNode, listOf(value))
        }
    }
    
    public def BooleanNode class(value: Boolean) => {
        members {
            value fun() => value,
            struct fun() => structs.create(BooleanNode, listOf(value))
        }
    }
    
    public def StringNode class(value: String) => {
        members {
            value fun() => value,
            struct fun() => structs.create(StringNode, listOf(value))
        }
    }
    
    public def VariableReferenceNode class(identifier: String) => {
        members {
            identifier fun() => identifier,
            struct fun() => structs.create(VariableReferenceNode, listOf(identifier))
        }
    }
};
