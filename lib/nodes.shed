package shed.compiler;

import structs;

public val nodes = object {
    members {
        unit UnitNode,
        number NumberNode,
        boolean BooleanNode,
        string StringNode,
        variableReference VariableReferenceNode,
        ref VariableReferenceNode,
        call CallNode
    }
    
    // TODO: should be an interface
    public def Node class() => {
    }
    
    public def UnitNode class() => {
        members {
            struct fun() => structs.create(UnitNode, emptyList)
        }
    }
    
    public def NumberNode class(value: Double) => {
        members {
            value fun() => value,
            struct fun() => structs.create(NumberNode, listOf(value))
        }
    }
    
    public def BooleanNode class(value: Boolean) => {
        members {
            value fun() => value,
            struct fun() => structs.create(BooleanNode, listOf(value))
        }
    }
    
    public def StringNode class(value: String) => {
        members {
            value fun() => value,
            struct fun() => structs.create(StringNode, listOf(value))
        }
    }
    
    public def VariableReferenceNode class(identifier: String) => {
        members {
            identifier fun() => identifier,
            struct fun() => structs.create(VariableReferenceNode, listOf(identifier))
        }
    }
    
    public def CallNode class(callee: ExpressionNode, args: List[ExpressionNode]) => {
        members {
            callee fun() => callee,
            args fun() => args,
            struct fun() => structs.create(CallNode, listOf(callee, args))
        }
    }
};
