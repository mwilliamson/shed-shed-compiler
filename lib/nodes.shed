package shed.compiler;

public val nodes = object {
    // TODO: should be an interface
    public def Node class() => {
    }
    
    public def unit fun() => UnitNode();
    public def number fun(value: String) => NumberNode(value);
    public def boolean fun(value: Boolean) => BooleanNode(value);
    public def string fun(value: String) => StringNode(value);
    public def variableReference fun(identifier: String) => VariableReferenceNode(identifier);
    
    public def UnitNode class() => {
        public def equals fun(other: UnitNode) => true;
        public def represent fun() => "UnitNode";
    }
    
    public def NumberNode class(myValue: Double) => {
        public def value fun() => myValue;
        
        public def equals fun(other: NumberNode) =>
            myValue.equals(other.value());
        
        public def represent fun() =>
            "NumberNode(".concat(represent(myValue)).concat(")");
    }
    
    public def BooleanNode class(myValue: Boolean) => {
        public def value fun() => myValue;
        
        public def equals fun(other: Boolean) =>
            if myValue then other.value() else not(other.value());
        
        public def represent fun() =>
            "BooleanNode(".concat(if myValue then "true" else "false").concat(")");
    }
    
    public def StringNode class(value: String) => {
        members {
            value fun() => value,
            equals,
            represent
        }
        
        def equals fun(other: StringNode) =>
            value.equals(other.value())
            
        def represent fun() =>
            "StringNode(".concat(represent(value)).concat(")")
    }
    
    public def VariableReferenceNode class(identifier: String) => {
        members {
            identifier fun() => identifier,
            equals,
            represent
        }
        
        def equals fun(other: VariableReferenceNode) =>
            identifier.equals(other.identifier())
            
        def represent fun() =>
            "VariableReferenceNode(".concat(identifier.represent()).concat(")")
    }
};
