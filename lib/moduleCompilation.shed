module shed.compiler.moduleCompilation;

members {
    compileSourceToString
}

import strings;

import lop.strings.createStringSource;

import shed.compiler.parsing.parser.Parser;
import shed.compiler.referenceResolving.resolveReferences;
import shed.compiler.codeGeneration.microJavaScript;
import shed.compiler.javaScript.writing;
import shed.compiler.results;

val parser = Parser();

def compileSourceToString fun(source: StringSource) => do {
    val result = parser.parseModule(source).bind(fun(shedNode: ShedNode) =>
        resolveReferences(shedNode).bind(fun() => do {
            val javaScriptNode = microJavaScript.generate(shedNode);
            return results.success(writing.write(javaScriptNode));
        })
    );
    
    return result.valueOrElse(fun(failure: Failure) =>
        failure.messages().forEach(print)
    );
}
    
