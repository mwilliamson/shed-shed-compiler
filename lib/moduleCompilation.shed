module shed.compiler.moduleCompilation;

members {
    compileSourceToString
}

import strings;

import lop.strings.createStringSource;

import shed.compiler.parsing.parser.Parser;
import shed.compiler.parsing.expressions.expressionRules;
import shed.compiler.parsing.statements.statementRule;
import shed.compiler.parsing.modules.moduleRule;
import shed.compiler.codeGeneration.microJavaScript;
import shed.compiler.javaScript.writing;

val parser = Parser();

def compileSourceToString fun(source: StringSource) => do {
    val parseResult = parser.parse(parseRule(), source);
    return if parseResult.isSuccess() then do {
        val shedNode = parseResult.value();
        val javaScriptNode = microJavaScript.generate(shedNode);
        return writing.write(javaScriptNode);
    } else do {
        print("Parse failed:\n");
        print("source:");
        print(source.description());
        print("\n");
        print(represent(parseResult));
        print("\n");
    };
}

def parseRule fun() => do {
    // HACK TODO FIXME: need a better way of doing indirect mutual recursion
    val optionalMembers = lazyFunction(fun() =>
        expressionRules(statement).optionalMembers()
    );
    
    val expression = lazyFunction(fun() =>
        expressionRules(statement).expression()
    );
    
    val statement = lazyFunction(fun() =>
        statementRule(expression)
    );
        
    return moduleRule(statement, optionalMembers);
}
    
