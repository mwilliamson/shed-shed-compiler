module shed/compiler/moduleCompilation;

members::
    compileSourceToString

import strings;
import console;

import lop/strings.createStringSource;

import shed/compiler/parsing/parser.Parser;
import shed/compiler/referenceResolving.resolveReferences;
import shed/compiler/referenceResolving;
import shed/compiler/codeGeneration/microJavaScript;
import shed/compiler/javaScript/writing;
import shed/compiler/results;

val parser = Parser();

val defaultContext = referenceResolving.emptyContext
    .addRunTime("List")
    .addRunTime("Sequence")
    .addRunTime("String")
    .addRunTime("Function")
    .addRunTime("Type")
    .addRunTime("represent")

def compileSourceToString fun(source: StringSource) => let
    // TODO: should return a result
    val result = parser.parseModule(source).bind(fun(shedNode: ShedNode) => let
        //resolveReferences(shedNode, defaultContext).bind(fun() => let
            val javaScriptNode = microJavaScript.generate(shedNode)
            in results.success(writing.write(javaScriptNode))
        //)
    )
    
    in result.valueOrElse(fun(failure: Failure) =>
        failure.messages().forEach(console.stderr.write)
    )
    
