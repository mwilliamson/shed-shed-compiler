package shed.compiler;

import shed.compiler.Range;

public def StringSource class(string: String, myDescription: String, myRange: Range) => {
    public def asString fun() => string.substring(myRange.start(), myRange.end());
    public def description fun() => myDescription;
    public def indexRange fun() => myRange;
    
    public def range fun(rangeStart: Double, rangeEnd: Double) =>
        StringSource(
            string,
            description(),
            Range(myRange.start().add(rangeStart), myRange.start().add(rangeEnd))
        );
    
    public def equals fun(other: StringSource) => and(
        asString().equals(other.asString()),
        description().equals(other.description()),
        indexRange().equals(other.indexRange())
    );
    
    public def sliceFrom fun(index: Double) =>
        StringSource(string, description(), Range(myRange.start().add(index), myRange.end()));
    
    public def toRepresentation fun() =>
        "StringSource("
            .concat("string=").concat(asString())
            .concat("range=").concat(representation(myRange))
            .concat(")");
};
