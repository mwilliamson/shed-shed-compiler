module shed/compiler/parsing/tokenRules;

members {
    symbol, keyword, identifier, newline, symbolOrNewline, openingBrace,
    statementTerminator, closingParen
}

import lop/rules;

def symbol fun(value: String) =>
    rules.token("symbol", value);
    
def keyword fun(value: String) =>
    rules.token("keyword", value);
    
def identifier fun() =>
    rules.tokenOfType("identifier");
    
def newline fun() =>
    rules.tokenOfType("newline");

def symbolOrNewline fun(symbolValue: String) =>
    rules.sequence()
        .next(rules.firstOf(";", listOf(
            symbol(symbolValue),
            newline()
        )))
        .next(rules.zeroOrMore(newline()))
        .map(fun() => ());

def openingBrace fun() =>
    rules.sequence()
        .next(symbol("{"))
        .next(rules.zeroOrMore(newline()))
        .map(fun() => ());

val statementTerminator = symbolOrNewline(";");

def closingParen fun() =>
    rules.sequence()
        .next(rules.optional(newline()))
        .next(symbol(")"))
        .map(fun() => ());
