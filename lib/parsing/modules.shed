module shed.compiler.parsing.modules;

members {
    moduleRule
}

import options;

import lop.rules;

import shed.compiler.nodes;
import shed.compiler.parsing.tokenRules;

def moduleRule fun(statementRule: Rule[StatementNode]) =>
    rules.sequence()
        .capture(rules.optional(moduleDeclaration))
        .capture(rules.zeroOrMore(importRule))
        .capture(rules.zeroOrMore(statementRule))
        .next(rules.tokenOfType("end"))
        .map(fun(name: Option[List[String]], imports: List[ImportNode], statements: List[StatementNode]) =>
            nodes.moduleNode(name, emptyList, imports.concat(statements)));

val moduleName = rules.zeroOrMoreWithSeparator(
    tokenRules.identifier(),
    tokenRules.symbol(".")
);

val moduleDeclaration =
    rules.sequence()
        .next(tokenRules.keyword("module"))
        .cut()
        .capture(moduleName)
        .next(tokenRules.symbol(";"))
        .head();
        
val importRule =
    rules.sequence()
        .next(tokenRules.keyword("import"))
        .cut()
        .capture(moduleName)
        .next(tokenRules.symbol(";"))
        .map(nodes.importStatement);
