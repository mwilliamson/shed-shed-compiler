module shed/compiler/parsing/modules;

members::
    moduleRule

import options;

import lop/rules;

import shed/compiler/nodes;
import shed/compiler/parsing/tokenRules;
import shed/compiler/parsing/tokenRules.statementTerminator;

def moduleRule fun(statementRule: Rule[StatementNode], optionalMembersRule: Rule[MembersNode]) => do::
    val moduleBody =
        rules.sequence()
            .capture(rules.zeroOrMore(importRule))
            .capture(rules.zeroOrMore(statementRule))
            .map(fun(imports: List[ImportNode], statements: List[StatementNode]) =>
                imports.concat(statements));
                
    return rules.sequence()
        .capture(rules.optional(moduleDeclaration))
        .capture(optionalMembersRule)
        .capture(moduleBody)
        .next(rules.tokenOfType("end"))
        .map(nodes.moduleNode);

val moduleName = rules.zeroOrMoreWithSeparator(
    tokenRules.identifier(),
    tokenRules.symbol("/")
);

val valuePath = rules.zeroOrMore(
    rules.sequence()
        .next(tokenRules.symbol("."))
        .capture(tokenRules.identifier())
        .head()
);

val moduleDeclaration =
    rules.sequence()
        .next(tokenRules.keyword("module"))
        .cut()
        .capture(moduleName)
        .next(statementTerminator)
        .head();
        
val importRule =
    rules.sequence()
        .next(tokenRules.keyword("import"))
        .cut()
        .capture(moduleName)
        .capture(valuePath)
        .next(statementTerminator)
        .map(nodes.importStatement);
