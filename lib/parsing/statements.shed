module shed.compiler.parsing.statements;

members {
    statementRule
}

import lop.rules;

import shed.compiler.nodes;
import shed.compiler.parsing.tokenRules;

def statementRule fun(expressionRule: Rule[ExpressionNode]) => do {
    val expressionStatementRule =
        rules.sequence()
            .capture(expressionRule)
            .next(rules.token("symbol", ";"))
            .map(nodes.expressionStatement);
    
    val returnRule =
        rules.sequence()
            .next(tokenRules.keyword("return"))
            .cut()
            .capture(expressionRule)
            .next(tokenRules.symbol(";"))
            .map(nodes.returnStatement);
    
    return rules.firstOf("statement",
        listOf(
            returnRule,
            expressionStatementRule
        )
    );
}
