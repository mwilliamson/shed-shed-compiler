module shed.compiler.codeGeneration.microJavaScript;

members {
    generate,
    Generator
}

import shed.compiler.nodes;
import shed.compiler.javaScript.js;

val shed = nodes;
    
def generate fun(node: Node) => do {
    val generator = Generator(generate);
    return match(node,
        matchClass(shed.StringNode, generator.string),
        matchClass(shed.VariableReferenceNode, generator.variableReference),
        matchClass(shed.CallNode, generator.call),
        matchClass(shed.ExpressionStatementNode, generator.expressionStatement),
        matchClass(shed.ModuleNode, generator.moduleNode)
    );
}

def Generator class(generate: Function[ShedNode, JavaScriptNode]) => {
    members {
        string, variableReference, call,
        expressionStatement,
        moduleNode
    }

    def string fun(string: StringNode) =>
        js.string(string.value())

    def variableReference fun(variableReference: VariableReferenceNode) =>
        js.ref(variableReference.identifier())
        
    def call fun(call: CallNode) =>
        js.call(generate(call.callee()), call.args().map(generate))

    def expressionStatement fun(expressionStatement: ExpressionStatementNode) =>
        js.expressionStatement(generate(expressionStatement.expression()))
        
    def moduleNode fun(moduleNode: ModuleNode) =>
        js.statements(moduleNode.statements().map(generate))
}
