module shed.compiler.codeGeneration.microJavaScript;

members {
    generate
}

import shed.compiler.nodes;
import shed.compiler.javaScript.js;

val shed = nodes;
    
def generate fun(node: Node) =>
    match(node,
        matchClass(shed.StringNode, generateString),
        matchClass(shed.VariableReferenceNode, generateVariableReference),
        matchClass(shed.CallNode, generateCall),
        matchClass(shed.ExpressionStatementNode, generateExpressionStatement),
        matchClass(shed.ModuleNode, generateModule)
    )
    
def generateString fun(string: StringNode) =>
    js.string(string.value())

def generateVariableReference fun(variableReference: VariableReferenceNode) =>
    js.ref(variableReference.identifier())
    
def generateCall fun(call: CallNode) =>
    js.call(generate(call.callee()), call.args().map(generate))

def generateExpressionStatement fun(expressionStatement: ExpressionStatementNode) =>
    js.expressionStatement(generate(expressionStatement.expression()))
    
def generateModule fun(moduleNode: ModuleNode) =>
    js.statements(moduleNode.statements().map(generate))
