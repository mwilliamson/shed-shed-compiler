module shed.compiler.codeGeneration.microJavaScript;

members {
    generate,
    Generator
}

import shed.compiler.nodes;
import shed.compiler.javaScript.js;

val shed = nodes;
    
def generate fun(node: Node) =>
    Generator(generate).generate(node)

def Generator class(generate: Function[ShedNode, JavaScriptNode]) => {
    members {
        generate generatorGenerate
    }
    
    val shedGlobal = js.ref("$shed");
    
    def generatorGenerate fun(node: ShedNode) =>
        match(node,
            matchClass(shed.UnitNode, unit),
            matchClass(shed.BooleanNode, boolean),
            matchClass(shed.NumberNode, number),
            matchClass(shed.StringNode, string),
            matchClass(shed.VariableReferenceNode, variableReference),
            matchClass(shed.IfThenElseNode, ifThenElse),
            matchClass(shed.CallNode, call),
            matchClass(shed.MemberAccessNode, memberAccess),
            matchClass(shed.ExpressionStatementNode, expressionStatement),
            matchClass(shed.ModuleNode, moduleNode)
        )

    def unit fun(unit: UnitNode) =>
        js.propertyAccess(shedGlobal, "unit")

    def boolean fun(boolean: BooleanNode) =>
        js.boolean(boolean.value())

    def number fun(number: NumberNode) =>
        js.call(
            js.propertyAccess(shedGlobal, "number"),
            listOf(js.number(number.value()))
        )

    def string fun(string: StringNode) =>
        js.call(
            js.propertyAccess(shedGlobal, "string"),
            listOf(js.string(string.value()))
        )

    def variableReference fun(variableReference: VariableReferenceNode) =>
        js.ref(variableReference.identifier())
    
    def ifThenElse fun(ifThenElse: IfThenElseNode) =>
        js.conditional(
            generate(ifThenElse.condition()),
            generate(ifThenElse.trueValue()),
            generate(ifThenElse.falseValue())
        )
    
    def call fun(call: CallNode) =>
        js.call(generate(call.callee()), call.args().map(generate))
    
    def memberAccess fun(memberAccess: MemberAccessNode) =>
        js.propertyAccess(generate(memberAccess.left()), memberAccess.memberName())

    def expressionStatement fun(expressionStatement: ExpressionStatementNode) =>
        js.expressionStatement(generate(expressionStatement.expression()))
        
    def moduleNode fun(moduleNode: ModuleNode) =>
        js.statements(moduleNode.statements().map(generate))
}
