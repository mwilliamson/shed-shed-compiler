module shed/compiler/javaScript/writing;

members::
    write

import json;
import strings;
import regex;

import shed/compiler/javaScript/js;

val lowestPrecedence = 100;

def write fun(javaScriptNode: js.JavaScriptNode) =>
    writeWithPrecedence(javaScriptNode, lowestPrecedence)

def writeWithPrecedence fun(javaScriptNode: js.JavaScriptNode, precedence: Double) =>
    match(javaScriptNode,
        matchClass(js.BooleanNode, writeBoolean),
        matchClass(js.NumberNode, writeNumber),
        matchClass(js.StringNode, writeString),
        matchClass(js.VariableReferenceNode, writeVariableReference),
        matchClass(js.ConditionalOperatorNode, writeExpression(conditionalOperatorWriter, precedence)),
        matchClass(js.CallNode, writeCall),
        matchClass(js.PropertyAccessNode, writePropertyAccess),
        matchClass(js.FunctionNode, writeExpression(functionWriter, precedence)),
        matchClass(js.ObjectNode, writeObject),
        matchClass(js.AndNode, writeExpression(andWriter, precedence)),
        
        matchClass(js.ExpressionStatementNode, writeExpressionStatement),
        matchClass(js.ReturnNode, writeReturn),
        matchClass(js.VarDeclarationNode, writeVar),
        
        matchClass(js.StatementsNode, writeStatements)
    )

def ExpressionType class() => ::
    pass

def writeExpression fun[T] => (expressionType: ExpressionType[T], precedence: Double) =>
    fun(node: T) => do::
        def subWrite fun(node: js.JavaScriptNode) =>
            writeWithPrecedence(node, expressionType.precedence)
            
        val innerString = expressionType.write(subWrite, node);
        return if precedence.lessThanOrEqual(expressionType.precedence) then
            "(".concat(innerString).concat(")")
        else
            innerString;

val conditionalOperatorWriter = object::
    members::
        precedence 15,
        write writeConditionalOperator
    
    def writeConditionalOperator fun(write: Function[JavaScriptNode, String], conditional: js.ConditionalOperatorNode) =>
        write(conditional.condition())
            .concat(" ? ")
            .concat(write(conditional.trueValue()))
            .concat(" : ")
            .concat(write(conditional.falseValue()))

def writeBoolean fun(bool: js.BooleanNode) =>
    if bool.value() then "true" else "false"
    
def writeNumber fun(number: js.NumberNode) =>
    number.value()
    
def writeString fun(string: js.StringNode) =>
    json.stringifyString(string.value())
    
def writeVariableReference fun(ref: js.VariableReferenceNode) =>
    ref.identifier()
    
def writeCall fun(call: js.CallNode) =>
    writeWithPrecedence(call.callee(), 2)
        .concat("(")
        .concat(strings.join(", ", call.args().map(write)))
        .concat(")")
        
def writePropertyAccess fun(propertyAccess: js.PropertyAccessNode) =>
    writeWithPrecedence(propertyAccess.left(), 1)
        .concat(".")
        .concat(propertyAccess.propertyName())

val functionWriter = object::
    members::
        precedence 20,
        write writeFunction
    
    def writeFunction fun(write: Function[js.JavaScriptNode, String], func: js.FunctionNode) =>
        "function("
            .concat(strings.join(", ", func.formalArgs()))
            .concat(") {")
            .concat(writeIndentedStatements(func.statements()))
            .concat("\n}")

def writeIndentedStatements fun(statements: List[js.StatementNode]) =>
    strings.join(
        "",
        statements
            .map(write)
            .map(fun(statement: String) => "\n    ".concat(indent(statement)))
    )
    
def indent fun(string: String) =>
    string.replace("\n", "\n    ")

def writeObject fun(obj: js.ObjectNode) =>
    "{"
        .concat(strings.join(",", obj.properties().map(writeProperty)))
        .concat("\n}")


val andWriter = object::
    members::
        precedence 13,
        write writeAnd
    
    def writeAnd fun(write: Function[js.JavaScriptNode, String], andNode: js.AndNode) =>
        write(andNode.left()).concat(" && ").concat(write(andNode.right()))

def writeProperty fun(property: Tuple[String, js.ExpressionNode]) =>
    property.map(fun(name: String, value: js.ExpressionNode) =>
        "\n    ".concat(name).concat(": ").concat(indent(write(value)))
    )

def writeExpressionStatement fun(expressionStatement: js.ExpressionStatementNode) =>
    write(expressionStatement.expression()).concat(";")

def writeReturn fun(returnStatement: js.ReturnNode) =>
    "return ".concat(write(returnStatement.value())).concat(";")

def writeVar fun(varDeclaration: js.VarDeclarationNode) =>
    "var "
        .concat(varDeclaration.name())
        .concat(" = ")
        .concat(write(varDeclaration.initialValue()))
        .concat(";")

def writeStatements fun(statements: js.StatementsNode) =>
    strings.join("\n", statements.statements().map(write))
