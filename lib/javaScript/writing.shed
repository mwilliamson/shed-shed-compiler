module shed.compiler.javaScript.writing;

members {
    write
}

import json;
import strings;

import shed.compiler.javaScript.js;

def write fun(javaScriptNode: JavaScriptNode) =>
    match(javaScriptNode,
        matchClass(js.StringNode, writeString),
        matchClass(js.VariableReferenceNode, writeVariableReference),
        matchClass(js.CallNode, writeCall),
        matchClass(js.PropertyAccessNode, writePropertyAccess),
        matchClass(js.ExpressionStatementNode, writeExpressionStatement),
        matchClass(js.StatementsNode, writeStatements)
    )
    
def writeString fun(string: StringNode) =>
    json.stringifyString(string.value())
    
def writeVariableReference fun(ref: VariableReferenceNode) =>
    ref.identifier()
    
def writeCall fun(call: CallNode) =>
    write(call.callee())
        .concat("(")
        .concat(strings.join(", ", call.args().map(write)))
        .concat(")")
        
def writePropertyAccess fun(propertyAccess: PropertyAccessNode) =>
    write(propertyAccess.left())
        .concat(".")
        .concat(propertyAccess.propertyName())
    
def writeExpressionStatement fun(expressionStatement: ExpressionStatementNode) =>
    write(expressionStatement.expression()).concat(";")
    
def writeStatements fun(statements: StatementsNode) =>
    strings.join("\n", statements.statements().map(write))
