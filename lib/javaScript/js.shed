module shed.compiler.javaScript.js;

members {
    unit UnitNode,
    UnitNode,
    bool BooleanNode,
    BooleanNode,
    number NumberNode,
    NumberNode,
    string StringNode,
    StringNode,
    ref VariableReferenceNode,
    variableReference VariableReferenceNode,
    VariableReferenceNode,
    conditional ConditionalOperatorNode,
    ConditionalOperatorNode,
    call CallNode,
    CallNode,
    propertyAccess PropertyAccessNode,
    PropertyAccessNode,
    func FunctionNode,
    FunctionNode,
    obj ObjectNode,
    ObjectNode,
    and AndNode,
    AndNode,
    
    expressionStatement ExpressionStatementNode,
    ExpressionStatementNode,
    ret ReturnNode,
    ReturnNode,
    varDeclaration VarDeclarationNode,
    VarDeclarationNode,
    
    statements StatementsNode,
    StatementsNode
}

import structs;

def UnitNode class() => {
    members {
        value fun() => value,
        struct fun() => structs.create(UnitNode, emptyList)
    }
}

def StringNode class(value: String) => {
    members {
        value fun() => value,
        struct fun() => structs.create(StringNode, listOf(value))
    }
}

def BooleanNode class(value: Boolean) => {
    members {
        value fun() => value,
        struct fun() => structs.create(BooleanNode, listOf(value))
    }
}

def NumberNode class(value: String) => {
    members {
        value fun() => value,
        struct fun() => structs.create(NumberNode, listOf(value))
    }
}

def VariableReferenceNode class(identifier: String) => {
    members {
        identifier fun() => identifier,
        struct fun() => structs.create(VariableReferenceNode, listOf(identifier))
    }
}

def ConditionalOperatorNode class(condition: ExpressionNode, trueValue: ExpressionNode, falseValue: ExpressionNode) => {
    members {
        condition fun() => condition,
        trueValue fun() => trueValue,
        falseValue fun() => falseValue,
        struct fun() => structs.create(ConditionalOperatorNode, listOf(condition, trueValue, falseValue))
    }
}

def CallNode class(callee: ExpressionNode, args: List[ExpressionNode]) => {
    members {
        callee fun() => callee,
        args fun() => args,
        struct fun() => structs.create(CallNode, listOf(callee, args))
    }
}

def PropertyAccessNode class(left: ExpressionNode, propertyName: String) => {
    members {
        left fun() => left,
        propertyName fun() => propertyName,
        struct fun() => structs.create(PropertyAccessNode, listOf(left, propertyName))
    }
}

def FunctionNode class(formalArgs: List[String], statements: List[StatementNode]) => {
    members {
        formalArgs fun() => formalArgs,
        statements fun() => statements,
        struct fun() => structs.create(FunctionNode, listOf(formalArgs, statements))
    }
}

def ObjectNode class(properties: List[Tuple[String, ExpressionNode]]) => {
    members {
        properties fun() => properties,
        struct fun() => structs.create(ObjectNode, listOf(properties))
    }
}

def AndNode class(left: ExpressionNode, right: ExpressionNode) => {
    members {
        left fun() => left,
        right fun() => right,
        struct fun() => structs.create(AndNode, listOf(left, right))
    }
}

def ExpressionStatementNode class(expression: ExpressionNode) => {
    members {
        expression fun() => expression,
        struct fun() => structs.create(ExpressionStatementNode, listOf(expression))
    }
}

def ReturnNode class(value: ExpressionNode) => {
    members {
        value fun() => value,
        struct fun() => structs.create(ReturnNode, listOf(value))
    }
}

def VarDeclarationNode class(name: String, initialValue: ExpressionNode) => {
    members {
        name fun() => name,
        initialValue fun() => initialValue,
        struct fun() => structs.create(VarDeclarationNode, listOf(name, initialValue))
    }
}

def StatementsNode class(statements: List[StatementNode]) => {
    members {
        statements fun() => statements,
        struct fun() => structs.create(StatementsNode, listOf(statements))
    }
}
