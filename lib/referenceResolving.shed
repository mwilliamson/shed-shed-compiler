module shed/compiler/referenceResolving;

members::
    resolveReferences,
    emptyContext,
    variableNotInScope

import sequences;

import lop/sources

import shed/compiler/results
import shed/compiler/nodes
import shed/compiler/scoping
import shed/compiler/phases

def resolveReferences fun(node: ShedNode, context: Context) =>
    resolveReferencesInPhase(node, context, phases.runTime)

def resolveReferencesInPhase fun(node: ShedNode, context: Context, phase: phases.Phase) => let
    val result = if classOf(node).equals(nodes.VariableReferenceNode) then
        resolveRef(node, context, phase)
    else
        results.success(context)
    
    val resultUpdatedContext = if isVariableBinder(node) then
        result.map(fun(context: Context) =>
            if classOf(node).equals(nodes.FormalParameterNode) then
                context.addCompileTime(node.name())
            else
                context.addRunTime(node.name())
        )
    else
        result
    
    val scope = scoping.scopeOf(node)
    in resultUpdatedContext.bind(fun(context: Context) => resolveScope(scope, context, phase))

def resolveRef fun(ref: VariableReferenceNode, context: Context, phase: phases.Phase) => let
    val name = ref.identifier()
    in if context.contains(name, phase) then
        results.success(context)
    else
        results.failure(listOf(variableNotInScope(ref)))

def isVariableBinder fun(node: ShedNode) =>
    // TODO: introduce a VariableBinderNode interface to remove this logic
    match(node,
        matchClass(nodes.FormalParameterNode, fun() => true),
        matchClass(nodes.FormalArgumentNode, fun() => true),
        matchClass(nodes.ValDeclarationNode, fun() => true),
        matchClass(nodes.DefinitionNode, fun() => true),
        matchClass(nodes.ImportNode, fun() => true),
        matchDefault(fun() => false)
    )

def resolveScope fun(scope: Scope, context: Context, phase: phases.Phase) =>
    if classOf(scope).equals(scoping.ChangePhase) then
        resolveScope(scope.scope(), context, scope.phase())
    else let 
        val result = resolveAll(scope.nodes(), context, phase)
        in match(scope,
            matchClass(scoping.SameScope, fun(scope: SameScope) => result),
            matchClass(scoping.SubScope, fun(scope: SubScope) =>
                result.map(fun(subContext: Context) => context)
            )
        )
    

def resolveAll fun(nodes: List[ShedNode], context: Context, phase: phases.Phase) =>
    nodes.foldLeft(results.success(context), fun(result: Result, child: ShedNode) =>
        result.bind(fun(context: Context) => resolveReferencesInPhase(child, context, phase))
    )

def variableNotInScope fun(ref: VariableReferenceNode) => let
    val mainMessage = "variable not in scope: ".concat(ref.identifier())
    val suffix = sources.tryGetSource(ref)
        .map(fun(source) => "\n".concat(source.describe()))
        .valueOrElse(fun() => "")
    in mainMessage.concat(suffix)
        

// TODO: modify the context to contain the current phase

def Context class(bindings: Sequence[Binding]) => ::
    members::
        contains,
        addRunTime,
        addCompileTime,
        add
    
    def contains fun(name: String, phase: phases.Phase) => let
        // TODO: grab the first binding regardless of phase
        val isMatchingBinding = fun(binding: Binding) =>
            binding.name().equals(name) && phase.lessThanOrEqual(binding.phase())
        
        in sequences.any(isMatchingBinding, bindings)
    
    def addRunTime fun(name: String) =>
        add(name, phases.runTime)
    
    def addCompileTime fun(name: String) =>
        add(name, phases.compileTime)
    
    def add fun(name: String, phase: Phase) =>
        Context(sequences.cons(Binding(name, phase), bindings))

val emptyContext = Context(sequences.nil);

def Binding class(name: String, phase: phases.Phase) => ::
    members ::
        name fun() => name
        phase fun() => phase
