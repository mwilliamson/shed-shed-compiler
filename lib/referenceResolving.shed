module shed/compiler/referenceResolving;

members::
    resolveReferences,
    emptyContext,
    variableNotInScope

import sequences
import lazySequences

import lop/sources

import shed/compiler/results
import shed/compiler/nodes
import shed/compiler/scoping
import shed/compiler/phases

def resolveReferences fun(node: nodes.ShedNode, context: Context) => let
    val result = if classOf(node).equals(nodes.VariableReferenceNode) then
        resolveRef(node, context)
    else
        results.success(())

    val scope = scoping.scopeOf(node)
    in result.bind(fun(_) => resolveScope(scope, context))

def resolveRef fun(ref: nodes.VariableReferenceNode, context: Context) => let
    val name = ref.identifier()
    in if context.contains(name) then
        results.success(())
    else
        results.failure(listOf(variableNotInScope(ref)))
    

def isVariableBinder fun(node: nodes.ShedNode) =>
    // TODO: introduce a VariableBinderNode interface to remove this logic
    match(node,
        matchClass(nodes.FormalParameterNode, fun() => true),
        matchClass(nodes.FormalArgumentNode, fun() => true),
        matchClass(nodes.ValDeclarationNode, fun() => true),
        matchClass(nodes.DefinitionNode, fun() => true),
        matchClass(nodes.ImportNode, fun() => true),
        matchDefault(fun() => false)
    )

def resolveScope fun(scope: scoping.Scope, context: Context) =>
    if classOf(scope).equals(scoping.ChangePhase) then
        resolveScope(scope.scope(), context.changePhase(scope.phase()))
    else let 
        val updatedContext = if classOf(scope).equals(scoping.SubScope) then
            addVariablesInNodes(context, scope.nodes())
        else
            context
            
        in resolveAll(scope.nodes(), updatedContext)

def addVariablesInNodes fun(context: Context, nodes: List[ShedNode]) =>
    nodes.foldLeft(context, addVariablesInNode)

def addVariablesInNode fun(context: Context, node: nodes.ShedNode) => let
    val updatedContext = if isVariableBinder(node) then
        if classOf(node).equals(nodes.FormalParameterNode) then
            context.addCompileTime(node.name())
        else
            context.addRunTime(node.name())
    else
        context
    
    val scope = scoping.scopeOf(node)
    
    in addVariablesInSameScope(updatedContext, scope)

def addVariablesInSameScope fun(context: Context, scope: scoping.Scope) =>
    match(scope,
        matchClass(scoping.ChangePhase, fun(scope) =>
            addVariablesInSameScope(context, scope.scope())),
            
        matchClass(scoping.SubScope, fun(scope) => context),
        
        matchClass(scoping.SameScope, fun(scope) =>
            addVariablesInNodes(context, scope.nodes()))
    )

def resolveAll fun(nodes: List[nodes.ShedNode], context: Context) =>
    nodes.foldLeft(results.success(context), fun(result, child) =>
        result.bind(fun(_) => resolveReferences(child, context))
    )

def variableNotInScope fun(ref: nodes.VariableReferenceNode) => let
    val mainMessage = "variable not in scope: ".concat(ref.identifier())
    val suffix = sources.tryGetSource(ref)
        .map(fun(source) => "\n".concat(source.describe()))
        .valueOrElse(fun() => "")
    in mainMessage.concat(suffix)
        

def Context class(bindings: Sequence[Binding], phase: phases.Phase) => ::
    members::
        contains,
        addRunTime,
        addCompileTime,
        add,
        changePhase,
        phase fun() => phase
    
    def contains fun(name: String) => let
        // TODO: grab the first binding regardless of phase
        val isMatchingBinding = fun(binding: Binding) =>
            binding.name().equals(name)
        
        in find(isMatchingBinding, bindings)
            .map(fun(binding) => phase.lessThanOrEqual(binding.phase()))
            .valueOrElse(fun() => false)
    
    def addRunTime fun(name: String) =>
        add(name, phases.runTime)
    
    def addCompileTime fun(name: String) =>
        add(name, phases.compileTime)
    
    def add fun(name: String, phase: phases.Phase) =>
        Context(sequences.cons(Binding(name, phase), bindings), phase)
    
    def changePhase fun(newPhase: phases.Phase) =>
        Context(bindings, newPhase)
    
val emptyContext = Context(sequences.nil, phases.runTime);

def Binding class(name: String, phase: phases.Phase) => ::
    members ::
        name fun() => name
        phase fun() => phase

def find fun[T] => (predicate: Predicate[T], sequence: Sequence[T]) =>
    sequences.head(lazySequences.filter(predicate, sequence))
