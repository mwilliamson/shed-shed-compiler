module shed/compiler/referenceResolving;

members::
    resolveReferences,
    emptyContext,
    variableNotInScope

import sequences;

import shed/compiler/results;
import shed/compiler/nodes;
import shed/compiler/scoping;

def resolveReferences fun(node: ShedNode, context: Context) => let
    val scope = scoping.scopeOf(node)
    val result = if classOf(node).equals(nodes.VariableReferenceNode) then
        resolveRef(node, context)
    else
        results.success(context)
    
    val resultUpdatedContext = if isVariableBinder(node) then
        result.map(fun(context: Context) => context.add(node.name()))
    else
        result
    
    in resultUpdatedContext.bind(fun(context: Context) => resolveScope(scope, context))

def resolveRef fun(ref: VariableReferenceNode, context: Context) => let
    val name = ref.identifier()
    in if context.contains(name) then
        results.success(context)
    else
        results.failure(listOf(variableNotInScope(name)))

def isVariableBinder fun(node: ShedNode) =>
    // TODO: introduce a VariableBinderNode interface to remove this logic
    match(node,
        matchClass(nodes.FormalArgumentNode, fun() => true),
        matchDefault(fun() => false)
    )

def resolveScope fun(scope: Scope, context: Context) => let
    val result = resolveAll(scope.nodes(), context)
    in match(scope,
        matchClass(scoping.SameScope, fun(scope: SameScope) => result),
        matchClass(scoping.SubScope, fun(scope: SubScope) =>
            result.map(fun(subContext: Context) => context)
        )
    )
    

def resolveAll fun(nodes: List[ShedNode], context: Context) =>
    nodes.foldLeft(results.success(context), fun(result: Result, child: ShedNode) =>
        result.bind(fun(context: Context) => resolveReferences(child, context))
    )

def variableNotInScope fun(name: String) =>
    "variable not in scope: ".concat(name)

def Context class(names: Sequence[String]) => ::
    members::
        contains,
        add
    
    def contains fun(name: String) =>
        sequences.any(fun(n: String) => n.equals(name), names)
        
    def add fun(name: String) =>
        Context(sequences.cons(name, names))

val emptyContext = Context(sequences.nil);

