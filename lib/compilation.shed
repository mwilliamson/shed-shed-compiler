module shed/compiler/compilation

members {
    compileString,
    main
}

import files
import promises
import strings
import lists
import sequences

import lop/strings.createStringSource

import shed/compiler/moduleCompilation

def main fun(argv: List[String]) => let
    val pathRoots = argv.filter(fun(arg: String) => not(arg.substring(0, 2).equals("--")))
    
    val shedFilePaths = findShedFiles(pathRoots)
    
    val shedParts = shedFilePaths.bind(compileShedFiles).map(joinJavaScriptUnits)
    val runtime = compileRuntime()
    val programParts = promises.combineList(listOf(runtime, shedParts))
    
    val mainFunction = sequences.head(
        argv.filter(fun(arg: String) => arg.substring(0, 7).equals("--main="))
            .map(fun(arg: String) => arg.sliceFrom(7))
    )
    
    in programParts.map(joinJavaScriptUnits).map(fun(program: String) => do {
        print(program)
        mainFunction.map(fun(mainFunction: String) => do {
            print("\n\n$shed.js.import(\"".concat(mainFunction).concat("\")"))
            print("($shed.lists.createFromArray(process.argv.slice(2).map($shed.string)));")
        })
    })

def compileString fun(input: String) => let
    val source = createStringSource(input, "raw string")
    in compileRuntime().map(fun(runtime: String) =>
        runtime.concat(";\n\n").concat(moduleCompilation.compileSourceToString(source))
    )

// TODO:
//val runtimePath = path.join(__dirname, "../runtime/");

def compileRuntime fun() => let
    val jsFilePaths = files.finder()
        .filesOnly()
        .root("runtime/js")
        .filterFiles().hasExtension("js")
        .find()
    
    val shedFilePaths = findShedFiles(listOf("runtime/stdlib"))
    
    val bootstrapPart = readUtf8File("runtime/bootstrap.js")
    val jsParts = jsFilePaths.bind(readFiles)
    val shedParts = shedFilePaths.bind(compileShedFiles)
    val preludePart = readUtf8File("runtime/prelude.js")
    
    val allParts = promises.combineList(listOf(
        bootstrapPart.map(listOf),
        jsParts,
        shedParts,
        preludePart.map(listOf)
    )).map(lists.concat)
    
    in allParts.map(joinJavaScriptUnits)

def findShedFiles fun(roots: List[String]) =>
    files.finder()
        .filesOnly()
        .roots(roots)
        .filterFiles().hasExtension("shed")
        .find()

def readFiles fun(paths: List[String]) : Promise[List[String]] =>
    promises.combineList(paths.map(readUtf8File))
    
def compileShedFiles fun(paths: List[String]) : Promise[List[String]] =>
    promises.combineList(paths.map(compileShedFile))
    
def compileShedFile fun(path: String) : Promise[String] =>
    readUtf8File(path).map(fun(contents: String) => do {
        val source = createStringSource(contents, "File: ".concat(path))
        return moduleCompilation.compileSourceToString(source)
    })

def readUtf8File fun(path: String) =>
    files.readFile(path, "utf8");

def joinJavaScriptUnits fun(units: List[String]) =>
    strings.join(";\n\n", units)
