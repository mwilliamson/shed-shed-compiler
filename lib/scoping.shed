module shed/compiler/scoping;

members::
    scopeOf,
    SameScope,
    SubScope,
    ChangePhase

import shed/compiler/nodes
import shed/compiler/nodes
import shed/compiler/phases

def scopeOf fun(node: nodes.ShedNode) =>
    match(node, 
        matchClass(nodes.UnitNode, noScope),
        matchClass(nodes.NumberNode, noScope),
        matchClass(nodes.StringNode, noScope),
        matchClass(nodes.BooleanNode, noScope),
        
        matchClass(nodes.IfThenElseNode, ifScope),
        matchClass(nodes.CallNode, callScope),
        matchClass(nodes.FormalArgumentNode, formalArgScope),
        matchClass(nodes.FormalParameterNode, noScope),
        matchClass(nodes.FormalInputsNode, formalInputsScope),
        
        matchClass(nodes.VariableReferenceNode, noScope),
        matchClass(nodes.FunctionNode, functionScope),
        matchClass(nodes.TypeApplicationNode, typeApplicationScope),
        matchClass(nodes.MemberAccessNode, memberAccessScope),
        matchClass(nodes.ClassNode, classScope),
        matchClass(nodes.ObjectNode, objectScope),
        matchClass(nodes.MemberDeclarationNode, memberDeclarationScope),
        matchClass(nodes.ValDeclarationNode, valDeclarationScope),
        matchClass(nodes.DoBlockNode, doBlockScope),
        matchClass(nodes.LetInNode, letInScope),
        matchClass(nodes.AndNode, andScope),
        
        matchClass(nodes.ExpressionStatementNode, expressionStatementScope),
        matchClass(nodes.ReturnStatementNode, returnStatementScope),
        matchClass(nodes.DefinitionNode, definitionScope),
        
        matchClass(nodes.ImportNode, noScope),
        matchClass(nodes.ModuleNode, moduleScope)
    )

def noScope fun(node: nodes.ShedNode) => sameScope(emptyList)

def ifScope fun(node: nodes.IfThenElseNode) =>
    sameScope(listOf(node.condition(), node.trueValue(), node.falseValue()))
    
def callScope fun(node: nodes.CallNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))

def formalArgScope fun(node: nodes.FormalArgumentNode) =>
    ChangePhase(
        sameScope(node.type().map(fun(t) => listOf(t)).valueOrElse(fun() => emptyList)),
        phases.compileTime
    )

def formalInputsScope fun(node: nodes.FormalInputsNode) =>
    sameScope(node.parameters().concat(node.args()))

def functionScope fun(node: nodes.FunctionNode) =>
    subScope(listOf(node.formalInputs(), node.body()))

def typeApplicationScope fun(node: nodes.TypeApplicationNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))

def memberAccessScope fun(node: nodes.MemberAccessNode) =>
    sameScope(listOf(node.left()))

def classScope fun(node: nodes.ClassNode) =>
    subScope(listOf(node.formalInputs(), node.body()))

def objectScope fun(node: nodes.ObjectNode) =>
    subScope(node.statements().concat(node.memberDeclarations()))

def doBlockScope fun(node: nodes.DoBlockNode) =>
    subScope(node.statements())

def memberDeclarationScope fun(node: nodes.MemberDeclarationNode) =>
    sameScope(listOf(node.value()))

def valDeclarationScope fun(node: nodes.ValDeclarationNode) =>
    sameScope(listOf(node.value()))

def letInScope fun(node: nodes.LetInScope) =>
    subScope(node.declarations().concat(listOf(node.expression())))

def andScope fun(node: nodes.AndNode) =>
    sameScope(listOf(node.left(), node.right()))

def expressionStatementScope fun(node: nodes.ExpressionStatementNode) =>
    sameScope(listOf(node.expression()))

def returnStatementScope fun(node: nodes.ReturnStatementNode) =>
    sameScope(listOf(node.value()))

def definitionScope fun(node: nodes.DefinitionNode) =>
    sameScope(listOf(node.value()))

def moduleScope fun(node: nodes.ModuleNode) =>
    subScope(node.statements().concat(node.memberDeclarations()))


def Scope class() => ::
    pass

def SameScope class(nodes: List[nodes.ShedNode]) => ::
    members::
        nodes fun() => nodes

def SubScope class(nodes: List[nodes.ShedNode]) => ::
    members::
        nodes fun() => nodes

def ChangePhase class(scope: Scope, phase: phases.Phase) => ::
    members ::
        scope fun() => scope
        phase fun() => phase
    
val sameScope = SameScope;
val subScope = SubScope;
