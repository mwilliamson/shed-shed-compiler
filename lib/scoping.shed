module shed/compiler/scoping;

members::
    scopeOf,
    SameScope,
    SubScope

import shed/compiler/nodes;

def scopeOf fun(node: ShedNode) =>
    match(node, 
        matchClass(nodes.UnitNode, noScope),
        matchClass(nodes.NumberNode, noScope),
        matchClass(nodes.StringNode, noScope),
        matchClass(nodes.BooleanNode, noScope),
        
        matchClass(nodes.IfThenElseNode, ifScope),
        matchClass(nodes.CallNode, callScope),
        matchClass(nodes.FormalArgumentNode, formalArgScope),
        
        matchClass(nodes.VariableReferenceNode, noScope),
        matchClass(nodes.FunctionNode, functionScope),
        matchClass(nodes.TypeApplicationNode, typeApplicationScope),
        matchClass(nodes.MemberAccessNode, memberAccessScope),
        matchClass(nodes.ClassNode, classScope),
        matchClass(nodes.ObjectNode, objectScope),
        matchClass(nodes.MemberDeclarationNode, memberDeclarationScope),
        matchClass(nodes.ValDeclarationNode, valDeclarationScope),
        matchClass(nodes.DoBlockNode, doBlockScope),
        matchClass(nodes.LetInNode, letInScope),
        matchClass(nodes.AndNode, andScope),
        
        matchClass(nodes.ExpressionStatementNode, expressionStatementScope),
        matchClass(nodes.ReturnStatementNode, returnStatementScope),
        matchClass(nodes.DefinitionNode, definitionScope),
        
        matchClass(nodes.ImportNode, noScope),
        matchClass(nodes.ModuleNode, moduleScope)
    )

def noScope fun(node: ShedNode) => sameScope(emptyList)

def ifScope fun(node: IfThenElseNode) =>
    sameScope(listOf(node.condition(), node.trueValue(), node.falseValue()))
    
def callScope fun(node: CallNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))

def formalArgScope fun(node: FormalArgumentNode) =>
    sameScope(node.type().map(fun(t) => listOf(t)).valueOrElse(fun() => emptyList))

def functionScope fun(node: FunctionNode) =>
    subScope(node.formalArgs().concat(listOf(node.body())))

def typeApplicationScope fun(node: TypeApplicationNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))

def memberAccessScope fun(node: MemberAccessNode) =>
    sameScope(listOf(node.left()))

def classScope fun(node: ClassNode) =>
    subScope(node.formalArgs().concat(listOf(node.body())))

def objectScope fun(node: ObjectNode) =>
    subScope(node.statements().concat(node.memberDeclarations()))

def doBlockScope fun(node: DoBlockNode) =>
    subScope(node.statements())

def memberDeclarationScope fun(node: MemberDeclarationNode) =>
    sameScope(listOf(node.value()))

def valDeclarationScope fun(node: ValDeclarationNode) =>
    sameScope(listOf(node.value()))

def letInScope fun(node: LetInScope) =>
    subScope(node.declarations().concat(listOf(node.expression())))

def andScope fun(node: AndNode) =>
    sameScope(listOf(node.left(), node.right()))

def expressionStatementScope fun(node: ExpressionStatementNode) =>
    sameScope(listOf(node.expression()))

def returnStatementScope fun(node: ReturnStatementNode) =>
    sameScope(listOf(node.value()))

def definitionScope fun(node: DefinitionNode) =>
    sameScope(listOf(node.value()))

def moduleScope fun(node: ModuleNode) =>
    sameScope(node.statements().concat(node.memberDeclarations()))


def SameScope class(nodes: List[ShedNode]) => ::
    members::
        nodes fun() => nodes

def SubScope class(nodes: List[ShedNode]) => ::
    members::
        nodes fun() => nodes
    
val sameScope = SameScope;
val subScope = SubScope;
