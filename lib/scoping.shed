module shed/compiler/scoping;

members::
    scopeOf,
    SameScope,
    SubScope

import shed/compiler/nodes;

def scopeOf fun(node: ShedNode) =>
    match(node, 
        matchClass(nodes.UnitNode, noScope),
        matchClass(nodes.NumberNode, noScope),
        matchClass(nodes.StringNode, noScope),
        matchClass(nodes.BooleanNode, noScope),
        
        matchClass(nodes.IfThenElseNode, ifScope),
        matchClass(nodes.CallNode, callScope),
        matchClass(nodes.FormalArgumentNode, formalArgScope),
        
        matchClass(nodes.VariableReferenceNode, noScope),
        matchClass(nodes.FunctionNode, functionScope),
        matchClass(nodes.TypeApplicationNode, typeApplicationScope)
    )

def noScope fun(node: ShedNode) => sameScope(emptyList)

def ifScope fun(node: IfThenElseNode) =>
    sameScope(listOf(node.condition(), node.trueValue(), node.falseValue()))
    
def callScope fun(node: CallNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))

def formalArgScope fun(node: FormalArgumentNode) =>
    sameScope(listOf(node.type()))

def functionScope fun(node: FunctionNode) =>
    subScope(node.formalArgs().concat(listOf(node.body())))

def typeApplicationScope fun(node: TypeApplicationNode) =>
    sameScope(listOf(node.callee()).concat(node.args()))


def SameScope class(nodes: List[ShedNode]) => ::
    members::
        nodes fun() => nodes

def SubScope class(nodes: List[ShedNode]) => ::
    members::
        nodes fun() => nodes
    
val sameScope = SameScope;
val subScope = SubScope;
