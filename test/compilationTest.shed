module shed/compiler/compilationTest;

members::
    testCases

import nodejs;

import hat.TestCase;
import duck.assertThat;
import duck.MatchResult;

import shed/compiler/compilation;

val testCases = listOf(
    TestCase("can execute program containing print statement", fun() => do::
        val shedProgram = "print(\"Hello world\");";
        val jsProgramPromise = compilation.compileString(shedProgram);
        
        return jsProgramPromise.bind(fun(jsProgram: String) =>
            nodejs.executeString(jsProgram).map(fun(result) =>
                assertThat(result, isSuccessWithOutput("Hello world"))
            )
        );
    )
);

val testCases = listOf(
    TestCase("can import module", fun() => do::
        val shedProgram = "import options;\nprint(options.none.orElse(fun() => \"Hello world\"));";
        val jsProgramPromise = compilation.compileString(shedProgram);
        
        return jsProgramPromise.bind(fun(jsProgram: String) =>
            nodejs.executeString(jsProgram).map(fun(result) =>
                assertThat(result, isSuccessWithOutput("Hello world"))
            )
        );
    )
);

val testCases = listOf(
    TestCase("can import value from module", fun() => do::
        val shedProgram = "import options.none;\nprint(none.orElse(fun() => \"Hello world\"));";
        val jsProgramPromise = compilation.compileString(shedProgram);
        
        return jsProgramPromise.bind(fun(jsProgram: String) =>
            nodejs.executeString(jsProgram).map(fun(result) =>
                assertThat(result, isSuccessWithOutput("Hello world"))
            )
        );
    )
);
    
def isSuccessWithOutput fun(expectedOutput: String) => object::
    members::
        describeSelf,
        matches,
        describeMismatch,
        matchesWithDescription
    
    def describeSelf fun() => "successful exit with output: ".concat(expectedOutput);
    
    def matches fun(result: nodejs.ExecutionResult) =>
        matchesWithDescription(result).matches();
    
    def describeMismatch fun(result: nodejs.ExecutionResult) =>
        matchesWithDescription(result).mismatchDescription();
        
    def matchesWithDescription fun(result: nodejs.ExecutionResult) =>
        if not(result.isSuccess()) then
            MatchResult(
                false,
                "exit code was ".concat(result.exitCode().toString())
                    .concat(describeOutput(result))
                    .concat(describeError(result))
            )
        else if not(equal(result.stdout(), expectedOutput)) then
            MatchResult(false, describeOutput(result))
        else
            MatchResult(true, "");
            
    def describeOutput fun(result: nodejs.ExecutionResult) =>
        "stdout was: ".concat(result.stdout())
        
    def describeError fun(result: nodejs.ExecutionResult) =>
        "stderr was: ".concat(result.stderr())
