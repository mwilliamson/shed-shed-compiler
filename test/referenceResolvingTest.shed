module shed.compiler.referenceResolvingTest;

members {
    testCases
}

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;
import duck.anything;

import shed.compiler.nodes;
import shed.compiler.referenceResolving;
import shed.compiler.resultMatchers.isSuccess;

def requiresNoContext fun(node: ShedNode) => fun() =>
        assertThat(referenceResolving.resolveReferences(node), isSuccess(anything))

val testCases = listOf(
    TestCase("unit literal requires no context", requiresNoContext(nodes.unit())),
    TestCase("number literal requires no context", requiresNoContext(nodes.number("2"))),
    TestCase("string literal requires no context", requiresNoContext(nodes.string("hello"))),
    TestCase("boolean literal requires no context", requiresNoContext(nodes.bool(true)))
);
