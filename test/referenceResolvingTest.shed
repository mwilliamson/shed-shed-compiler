module shed.compiler.referenceResolvingTest;

members {
    testCases
}

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;
import duck.anything;

import shed.compiler.nodes;
import shed.compiler.referenceResolving.resolveReferences;
import shed.compiler.referenceResolving.emptyContext;
import shed.compiler.referenceResolving.variableNotInScope;
import shed.compiler.resultMatchers.isSuccess;
import shed.compiler.results.failure;

def requiresNoContext fun(node: ShedNode) => fun() =>
    assertThat(resolveReferences(node, emptyContext), isSuccess(anything))

def badRefDetected fun(node: ShedNode) => fun() =>
    assertThat(
        resolveReferences(node, emptyContext),
        equalTo(failure(listOf(variableNotInScope("badRef"))))
    )
    
val badRef = nodes.ref("badRef");
val noRef = nodes.unit();

val dummyNode = object { };

val testCases = listOf(
    TestCase("unit literal requires no context", requiresNoContext(nodes.unit())),
    TestCase("number literal requires no context", requiresNoContext(nodes.number("2"))),
    TestCase("string literal requires no context", requiresNoContext(nodes.string("hello"))),
    TestCase("boolean literal requires no context", requiresNoContext(nodes.bool(true))),
    
    TestCase("variable reference fails if context is empty", fun() =>
        assertThat(
            resolveReferences(nodes.ref("song"), emptyContext),
            equalTo(failure(listOf(variableNotInScope("song"))))
        )
    ),
    
    TestCase("variable reference fails if context doesn't contain name", fun() => let
        val context = emptyContext.add("song", dummyNode)
        in assertThat(
            resolveReferences(nodes.ref("artist"), context),
            equalTo(failure(listOf(variableNotInScope("artist"))))
        )
    ),
    
    TestCase("variable reference succeeds if name is in scope", fun() => let
        val context = emptyContext.add("song", dummyNode)
        in assertThat(
            resolveReferences(nodes.ref("song"), context),
            isSuccess(anything)
        )
    ),
    
    TestCase("function fails if body fails", fun() => let
        val func = nodes.func(emptyList, nodes.ref("song"))
        in assertThat(
            resolveReferences(func, emptyContext),
            equalTo(failure(listOf(variableNotInScope("song"))))
        )
    ),
    
    TestCase("function node adds variable to scope", fun() => let
        val context = emptyContext.add("String", dummyNode)
        val func = nodes.func(
            listOf(nodes.formalArgument("song", nodes.ref("String"))),
            nodes.ref("song")
        )
        in assertThat(
            resolveReferences(func, context),
            isSuccess(anything)
        )
    ),
    
    TestCase("condition of if has references resolved", 
        badRefDetected(nodes.ifThenElse(badRef, noRef, noRef))),
    
    TestCase("true branch of if has references resolved",
        badRefDetected(nodes.ifThenElse(noRef, badRef, noRef))),
    
    TestCase("false branch of if has references resolved", 
        badRefDetected(nodes.ifThenElse(noRef, noRef, badRef)))
);
