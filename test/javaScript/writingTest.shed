module shed.compiler.javaScript.writingTest;

members {
    testCases
}

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import shed.compiler.javaScript.writing.write;
import shed.compiler.javaScript.js;

val testCases = listOf(
    TestCase("can write boolean true", fun() =>
        assertThat(write(js.boolean(true)), equalTo("true"))
    ),
    
    TestCase("can write boolean false", fun() =>
        assertThat(write(js.boolean(false)), equalTo("false"))
    ),
    
    TestCase("can write numbers", fun() =>
        assertThat(write(js.number("4.2")), equalTo("4.2"))
    ),
    
    TestCase("can write strings", fun() =>
        assertThat(write(js.string("Hello world")), equalTo("\"Hello world\""))
    ),
    
    TestCase("can write variable references", fun() =>
        assertThat(
            write(js.ref("print")),
            equalTo("print")
        )
    ),
    
    TestCase("can write conditional operator", fun() =>
        assertThat(
            write(js.conditional(
                js.ref("condition"),
                js.ref("trueValue"),
                js.ref("falseValue")
            )),
            equalTo("condition ? trueValue : falseValue")
        )
    ),
    
    TestCase("can write function calls", fun() =>
        assertThat(
            write(js.call(js.ref("print"), listOf(js.string("Hello world")))),
            equalTo("print(\"Hello world\")")
        )
    ),
    
    TestCase("can write property accesses", fun() =>
        assertThat(
            write(js.propertyAccess(js.ref("bob"), "name")),
            equalTo("bob.name")
        )
    ),
    
    TestCase("can write functions", fun() =>
        assertThat(
            write(js.function(
                listOf("name", "age"),
                listOf(js.ret(js.ref("name")))
            )),
            equalTo("function(name, age) {\n    return name;\n}")
        )
    ),
    
    TestCase("can write empty object literal", fun() =>
        assertThat(
            write(js.obj(emptyList)),
            equalTo("{\n}")
        )
    ),
    
    TestCase("can write object literal", fun() =>
        assertThat(
            write(js.obj(listOf(
                tuple("one", js.number("1")),
                tuple("two", js.number("2"))
            ))),
            equalTo("{\n    one: 1,\n    two: 2\n}")
        )
    ),
    
    TestCase("operation is wrapped in brackets when used in higher-precedence operation", fun() =>
        assertThat(
            write(js.call(
                js.conditional(
                    js.ref("condition"),
                    js.ref("trueValue"),
                    js.ref("falseValue")
                ),
                emptyList
            )),
            equalTo("(condition ? trueValue : falseValue)()")
        )
    ),
    
    TestCase("operation is wrapped in brackets when used in same-precedence operation", fun() =>
        assertThat(
            write(
                js.conditional(
                    js.ref("first"),
                    js.conditional(
                        js.ref("second"),
                        js.ref("trueTrueValue"),
                        js.ref("trueFalseValue")
                    ),
                    js.ref("falseValue")
                )
            ),
            equalTo("first ? (second ? trueTrueValue : trueFalseValue) : falseValue")
        )
    ),
    
    TestCase("can write expression statements", fun() =>
        assertThat(
            write(js.expressionStatement(js.call(js.ref("print"), listOf(js.string("Hello world"))))),
            equalTo("print(\"Hello world\");")
        )
    ),
    
    TestCase("can write return statements", fun() =>
        assertThat(
            write(js.ret(js.ref("hello"))),
            equalTo("return hello;")
        )
    ),
    
    TestCase("can write var declarations", fun() =>
        assertThat(
            write(js.varDeclaration("message", js.ref("hello"))),
            equalTo("var message = hello;")
        )
    ),
    
    TestCase("can write list of statements", fun() =>
        assertThat(
            write(js.statements(listOf(js.expressionStatement(js.ref("one")), js.expressionStatement(js.ref("two"))))),
            equalTo("one;\ntwo;")
        )
    )
);
