module shed.compiler.javaScript.writingTest;

members {
    testCases
}

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import shed.compiler.javaScript.writing.write;
import shed.compiler.javaScript.js;

val testCases = listOf(
    TestCase("can write boolean true", fun() =>
        assertThat(write(js.boolean(true)), equalTo("true"))
    ),
    
    TestCase("can write boolean false", fun() =>
        assertThat(write(js.boolean(false)), equalTo("false"))
    ),
    
    TestCase("can write strings", fun() =>
        assertThat(write(js.string("Hello world")), equalTo("\"Hello world\""))
    ),
    
    TestCase("can write variable references", fun() =>
        assertThat(
            write(js.ref("print")),
            equalTo("print")
        )
    ),
    
    TestCase("can write function calls", fun() =>
        assertThat(
            write(js.call(js.ref("print"), listOf(js.string("Hello world")))),
            equalTo("print(\"Hello world\")")
        )
    ),
    
    TestCase("can write property accesses", fun() =>
        assertThat(
            write(js.propertyAccess(js.ref("bob"), "name")),
            equalTo("bob.name")
        )
    ),
    
    TestCase("can write expression statements", fun() =>
        assertThat(
            write(js.expressionStatement(js.call(js.ref("print"), listOf(js.string("Hello world"))))),
            equalTo("print(\"Hello world\");")
        )
    ),
    
    TestCase("can write list of statements", fun() =>
        assertThat(
            write(js.statements(listOf(js.expressionStatement(js.ref("one")), js.expressionStatement(js.ref("two"))))),
            equalTo("one;\ntwo;")
        )
    )
);
