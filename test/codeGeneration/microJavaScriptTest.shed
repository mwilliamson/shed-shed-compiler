module shed/compiler/codeGeneration/microJavaScriptTest;

members::
    testCases

import options;

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import shed/compiler/codeGeneration/microJavaScript.Generator;
import shed/compiler/nodes;
import shed/compiler/javaScript/js;

val shed = nodes;

val shedStatement = shed.expressionStatement(shed.string("Hello"));

val testCases = listOf(
    TestCase("Shed unit generates reference to $shed.unit", fun() =>
        assertThat(
            generate(shed.unit()),
            equalTo(js.propertyAccess(js.ref("$shed"), "unit"))
        )
    ),
    
    TestCase("Shed boolean generates JavaScript boolean", fun() =>
        assertThat(
            generate(shed.bool(true)),
            equalTo(js.bool(true))
        )
    ),
    
    TestCase("Shed number generates boxed JavaScript number", fun() =>
        assertThat(
            generate(shed.number("4.2")),
            equalTo(js.call(js.propertyAccess(js.ref("$shed"), "number"), listOf(js.number("4.2"))))
        )
    ),
    
    TestCase("Shed string generates boxed JavaScript string", fun() =>
        assertThat(
            generate(shed.string("blah")),
            equalTo(js.call(js.propertyAccess(js.ref("$shed"), "string"), listOf(js.string("blah"))))
        )
    ),
    
    TestCase("Shed variable reference generates JavaScript variable reference", fun() =>
        assertThat(
            generate(shed.ref("blah")),
            equalTo(js.ref("blah"))
        )
    ),
    
    TestCase("Shed if-then-else expression generates JavaScript conditional operator", fun() => do::
        val condition = shed.ref("condition");
        val trueValue = shed.ref("trueValue");
        val falseValue = shed.ref("falseValue");
        return assertThat(
            generate(shed.ifThenElse(condition, trueValue, falseValue)),
            equalTo(js.conditional(stub(condition), stub(trueValue), stub(falseValue)))
        );
    ),
    
    TestCase("Shed call generates JavaScript call", fun() =>
        assertThat(
            generate(shed.call(shed.ref("print"), listOf(shed.string("Hello")))),
            equalTo(js.call(stub(shed.ref("print")), listOf(stub(shed.string("Hello")))))
        )
    ),
    
    TestCase("Shed type application generates JavaScript for callee", fun() =>
        assertThat(
            generate(shed.typeApplication(shed.ref("filter"), listOf(shed.ref("String")))),
            equalTo(stub(shed.ref("filter")))
        )
    ),
    
    TestCase("Shed member access generates JavaScript property access through memberAccess", fun() =>
        assertThat(
            generate(shed.memberAccess(shed.ref("bob"), "name")),
            equalTo(js.call(
                js.propertyAccess(js.ref("$shed"), "memberAccess"),
                listOf(
                    stub(shed.ref("bob")),
                    js.propertyAccess(stub(shed.ref("bob")), "name")
                )
            ))
        )
    ),
    
    TestCase("Shed method generates JavaScript method call", fun() =>
        assertThat(
            generate(shed.call(shed.memberAccess(shed.ref("bob"), "name"), emptyList)),
            equalTo(js.call(js.propertyAccess(stub(shed.ref("bob")), "name"), emptyList))
        )
    ),
    
    TestCase("Shed function generates JavaScript function wrapped in $shed.function", fun() =>
        assertThat(
            generate(shed.func(
                shed.formalInputs(
                    emptyList,
                    listOf(shed.formalArgument("name", shed.ref("String")))
                ),
                shed.unit()
            )),
            equalTo(js.call(
                js.propertyAccess(js.ref("$shed"), "function"),
                listOf(js.func(
                    listOf("name"),
                    listOf(js.ret(stub(shed.unit())))
                ))
            ))
        )
    ),
    
    TestCase("Shed class without members generates JavaScript function that returns an object with $class property", fun() =>
        assertThat(
            generate(shed.classDeclaration(
                shed.formalInputs(
                    emptyList,
                    listOf(shed.formalArgument("name", shed.ref("String")))
                ),
                shed.obj(
                    emptyList,
                    listOf(shedStatement)
                )
            )),
            equalTo(js.call(
                js.func(
                    emptyList,
                    listOf(
                        js.varDeclaration("$class", js.call(
                            js.propertyAccess(js.ref("$shed"), "class"),
                            listOf(js.func(
                                listOf("name"),
                                listOf(
                                    stub(shedStatement),
                                    js.ret(js.obj(listOf(
                                        tuple("$class", js.ref("$class"))
                                    )))
                                )
                            ))
                        )),
                        js.ret(js.ref("$class"))
                    )
                ),
                emptyList
            ))
        )
    ),
    
    TestCase("Shed class generates JavaScript function that returns an object of members and $class", fun() =>
        assertThat(
            generate(shed.classDeclaration(
                shed.formalInputs(
                    emptyList,
                    listOf(shed.formalArgument("name", shed.ref("String")))
                ),
                shed.obj(
                    listOf(shed.memberDeclaration("x", nodes.ref("x"))),
                    listOf(shedStatement)
                )
            )),
            equalTo(js.call(
                js.func(
                    emptyList,
                    listOf(
                        js.varDeclaration("$class", js.call(
                            js.propertyAccess(js.ref("$shed"), "class"),
                            listOf(js.func(
                                listOf("name"),
                                listOf(
                                    stub(shedStatement),
                                    js.ret(js.obj(listOf(
                                        tuple("$class", js.ref("$class")),
                                        tuple("x", stub(nodes.ref("x")))
                                    )))
                                )
                            ))
                        )),
                        js.ret(js.ref("$class"))
                    )
                ),
                emptyList
            ))
        )
    ),
    
    TestCase("Shed object generates Shed class that's immediately instantiated", fun() => do::
        val obj = shed.obj(
            listOf(shed.memberDeclaration("x", nodes.ref("x"))),
            listOf(shedStatement)
        );
        return assertThat(
            generate(obj),
            equalTo(js.call(
                stub(shed.classDeclaration(shed.formalInputs(emptyList, emptyList), obj)),
                emptyList
            ))
        );
    ),
    
    TestCase("Shed do block generates JavaScript function that's immediately called", fun() => do::
        val firstStatement = shed.expressionStatement(shed.string("Hello"));
        val secondStatement = shed.ret(shed.string("world"));
        return assertThat(
            generate(shed.doBlock(listOf(firstStatement, secondStatement))),
            equalTo(js.call(
                js.func(
                    emptyList,
                    listOf(stub(firstStatement), stub(secondStatement))
                ),
                emptyList
            ))
        );
    ),
    
    TestCase("Shed let-in expression generates JavaScript function that's immediately called", fun() => do::
        val declaration = shed.valDeclaration("x", shed.ref("y"));
        val expression = shed.string("world");
        return assertThat(
            generate(shed.letIn(listOf(declaration), expression)),
            equalTo(js.call(
                js.func(
                    emptyList,
                    listOf(
                        stub(declaration),
                        js.ret(stub(expression))
                    )
                ),
                emptyList
            ))
        );
    ),
    
    TestCase("Shed and expression generates JavaScript and expression", fun() =>
        assertThat(
            generate(shed.and(shed.ref("left"), shed.ref("right"))),
            equalTo(js.and(stub(shed.ref("left")), stub(shed.ref("right"))))
        )
    ),
    
    TestCase("Shed expression statement generates JavaScript expression statement", fun() =>
        assertThat(
            generate(shed.expressionStatement(shed.string("Hello"))),
            equalTo(js.expressionStatement(stub(shed.string("Hello"))))
        )
    ),
    
    TestCase("Shed return statement generates JavaScript return statement", fun() =>
        assertThat(
            generate(shed.ret(shed.string("Hello"))),
            equalTo(js.ret(stub(shed.string("Hello"))))
        )
    ),
    
    TestCase("Shed val declaration generates JavaScript var declaration", fun() =>
        assertThat(
            generate(shed.valDeclaration("name", shed.string("Bob"))),
            equalTo(js.varDeclaration("name", stub(shed.string("Bob"))))
        )
    ),
    
    TestCase("Shed def generates JavaScript variable with the result of calling $define on the value", fun() =>
        assertThat(
            generate(shed.definition("name", shed.string("Bob"))),
            equalTo(js.varDeclaration(
                "name",
                js.call(
                    js.propertyAccess(
                        stub(shed.string("Bob")),
                        "$define"
                    ),
                    listOf(js.string("name"))
                )
            ))
        )
    ),
    
    TestCase("Shed imports are converted to calls to $shed.js.import", fun() =>
        assertThat(
            generate(shed.importStatement(listOf("shed", "example"), emptyList)),
            equalTo(js.varDeclaration(
                "example",
                js.call(
                    js.propertyAccess(
                        js.propertyAccess(
                            js.ref("$shed"),
                            "js"
                        ),
                        "import"
                    ),
                    listOf(js.string("shed/example"))
                )
            ))
        )
    ),
    
    TestCase("Shed imports with value paths use property accesses to get value", fun() =>
        assertThat(
            generate(shed.importStatement(listOf("shed", "example"), listOf("some", "value"))),
            equalTo(js.varDeclaration(
                "value",
                js.propertyAccess(
                    js.propertyAccess(
                        js.call(
                            js.propertyAccess(
                                js.propertyAccess(
                                    js.ref("$shed"),
                                    "js"
                                ),
                                "import"
                            ),
                            listOf(js.string("shed/example"))
                        ),
                        "some"
                    ),
                    "value"
                )
            ))
        )
    ),
    
    TestCase("Shed module without name generates immediately invoked function with generated statements", fun() =>
        assertThat(
            generate(shed.moduleNode(options.none, emptyList, listOf(shedStatement))),
            equalTo(js.call(
                js.func(
                    emptyList,
                    listOf(stub(shedStatement))
                ),
                emptyList
            ))
        )
    ),
    
    TestCase("named Shed module exports object of members", fun() =>
        assertThat(
            generate(shed.moduleNode(
                options.some(listOf("shed", "example")),
                listOf(shed.memberDeclaration("value", shed.ref("value"))),
                listOf(shedStatement)
            )),
            equalTo(
                js.expressionStatement(
                    js.call(
                        js.propertyAccess(js.ref("$shed"), "exportModule"),
                        listOf(
                            js.string("shed/example"),
                            js.func(
                                emptyList,
                                listOf(
                                    stub(shedStatement),
                                    js.ret(js.obj(listOf(
                                        tuple("value", stub(shed.ref("value")))
                                    )))
                                )
                            )
                        )
                    )
                )
            )
        )
    )
);

def subGenerate fun(node: ShedNode) =>
    stub(node)
    
def stub fun(node: ShedNode) =>
    js.ref("$stub$".concat(represent(node)))

val generator = Generator(subGenerate);
val generate = generator.generate;
