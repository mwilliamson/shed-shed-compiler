module shed/compiler/parsing/expressionsTest;

members::
    testCases

import options.some;
import options.none;

import hat.TestCase;
import lop/rules;

import shed/compiler/nodes;
import shed/compiler/nodes.Node;
import shed/compiler/parsing/expressions.expressionRules;
import shed/compiler/parsing/tokenRules;
import shed/compiler/parsing/testing.createAssertSuccessfulParse;

val testCases = listOf[TestCase](
    TestCase("can parse variable reference", fun() =>
        assertSuccessfulParse("blah", nodes.variableReference("blah"))
    ),
    
    TestCase("can parse if-then-else expression", fun() =>
        assertSuccessfulParse(
            "if true then 1 else 0",
            nodes.ifThenElse(
                nodes.bool(true),
                nodes.number("1"),
                nodes.number("0")
            )
        )
    ),
    
    TestCase("newline can precede else", fun() =>
        assertSuccessfulParse(
            "if true then 1\nelse 0",
            nodes.ifThenElse(
                nodes.bool(true),
                nodes.number("1"),
                nodes.number("0")
            )
        )
    ),
    
    TestCase("can parse nested if-then-else expressions", fun() =>
        assertSuccessfulParse(
            "if true then 1 else if false then 0 else 2",
            nodes.ifThenElse(
                nodes.bool(true),
                nodes.number("1"),
                nodes.ifThenElse(
                    nodes.bool(false),
                    nodes.number("0"),
                    nodes.number("2")
                )
            )
        )
    ),
    
    TestCase("can parse bracketed expression", fun() =>
        assertSuccessfulParse("(false)", nodes.bool(false))
    ),
    
    TestCase("can parse function call with no arguments", fun() =>
        assertSuccessfulParse("go()", nodes.call(nodes.ref("go"), emptyList))
    ),
    
    TestCase("can parse function call with one argument", fun() =>
        assertSuccessfulParse(
            "print(\"Hello\")",
            nodes.call(nodes.ref("print"), listOf(nodes.string("Hello")))
        )
    ),
    
    TestCase("can parse function call with multiple arguments", fun() =>
        assertSuccessfulParse(
            "equal(1,2)",
            nodes.call(nodes.ref("equal"), listOf(nodes.number("1"), nodes.number("2")))
        )
    ),
    
    TestCase("can parse repeated function calls", fun() =>
        assertSuccessfulParse(
            "go()()()",
            nodes.call(nodes.call(nodes.call(nodes.ref("go"), emptyList), emptyList), emptyList)
        )
    ),

// TODO: re-enable this test case
//    TestCase("can parse type application", fun() =>
//        assertSuccessfulParse(
//            "Dictionary[String, Number]",
//            nodes.typeApplication(
//                nodes.ref("Dictionary"),
//                listOf(nodes.ref("String"), nodes.ref("Number"))
//            )
//        )
//    ),
    
    TestCase("type applications are ignored in parsing", fun() =>
        assertSuccessfulParse(
            "Dictionary[String, Number]",
            nodes.ref("Dictionary")
        )
    ),
    
    TestCase("can parse member access", fun() =>
        assertSuccessfulParse(
            "bob.name",
            nodes.memberAccess(nodes.ref("bob"), "name")
        )
    ),
    
    TestCase("can parse function with no arguments", fun() =>
        assertSuccessfulParse(
            "fun() => ()",
            nodes.func(
                nodes.formalInputs(emptyList, emptyList),
                nodes.unit()
            )
        )
    ),
    
    TestCase("can parse function with formal arguments", fun() =>
        assertSuccessfulParse(
            "fun(first: String, second: Any) => ()",
            nodes.func(
                nodes.formalInputs(
                    emptyList,
                    listOf(
                        nodes.formalArgument("first", some(nodes.ref("String"))),
                        nodes.formalArgument("second", some(nodes.ref("Any")))
                    )
                ),
                nodes.unit()
            )
        )
    ),
    
    TestCase("type of function formal argument is optional", fun() =>
        assertSuccessfulParse(
            "fun(first) => ()",
            nodes.func(
                nodes.formalInputs(
                    emptyList,
                    listOf(
                        nodes.formalArgument("first", none)
                    )
                ),
                nodes.unit()
            )
        )
    ),
    
    TestCase("can parse function with explicit return type", fun() =>
        assertSuccessfulParse(
            "fun() : Unit => ()",
            nodes.func(
                nodes.formalInputs(emptyList, emptyList),
                nodes.unit()
            )
        )
    ),
    
    TestCase("can parse function with formal type parameters", fun() =>
        assertSuccessfulParse(
            "fun[T] => () => ()",
            nodes.func(
                nodes.formalInputs(
                    listOf(nodes.formalParameter("T")),
                    emptyList
                ),
                nodes.unit()
            )
        )
    ),
    
    TestCase("can parse empty object", fun() =>
        assertSuccessfulParse(
            "object ::\n  pass\n",
            nodes.obj(
                emptyList,
                emptyList
            )
        )
    ),
    
    TestCase("can parse object with body", fun() =>
        assertSuccessfulParse(
            "object::\n    x\n    y\n",
            nodes.obj(
                emptyList,
                listOf(stubStatement("x"), stubStatement("y"))
            )
        )
    ),
    
    TestCase("can parse object with members", fun() =>
        assertSuccessfulParse(
            "object::\n  members::\n    x\n  x\n  y\n",
            nodes.obj(
                listOf(nodes.memberDeclaration("x", nodes.ref("x"))),
                listOf(stubStatement("x"), stubStatement("y"))
            )
        )
    ),
    
    TestCase("can parse empty class", fun() =>
        assertSuccessfulParse(
            "class() =>::\n  pass\n",
            nodes.classDeclaration(
                nodes.formalInputs(emptyList, emptyList),
                nodes.obj(emptyList, emptyList)
            )
        )
    ),
    
    TestCase("can parse class with body", fun() =>
        assertSuccessfulParse(
            "class() => ::\n  members::\n    x\n  x\n  y\n",
            nodes.classDeclaration(
                nodes.formalInputs(emptyList, emptyList),
                nodes.obj(
                    listOf(nodes.memberDeclaration("x", nodes.ref("x"))),
                    listOf(stubStatement("x"), stubStatement("y"))
                )
            )
        )
    ),
                
    TestCase("can parse class with formal arguments", fun() =>
        assertSuccessfulParse(
            "class(first: String, second: Any) => ::\n  x\n",
            nodes.classDeclaration(
                nodes.formalInputs(
                    emptyList,
                    listOf(
                        nodes.formalArgument("first", some(nodes.ref("String"))),
                        nodes.formalArgument("second", some(nodes.ref("Any")))
                    )
                ),
                nodes.obj(emptyList, listOf(stubStatement("x")))
            )
        )
    ),
    
    TestCase("can parse class with formal type parameters", fun() =>
        assertSuccessfulParse(
            "class[T] => () => ::\n  x\n",
            nodes.classDeclaration(
                nodes.formalInputs(listOf(nodes.formalParameter("T")), emptyList),
                nodes.obj(emptyList, listOf(stubStatement("x")))
            )
        )
    ),
    
    TestCase("members can be declared inline", fun() =>
        assertSuccessfulMembersParse(
            "members::\nx 1\n",
            listOf(nodes.memberDeclaration("x", nodes.number("1")))
        )
    ),
    
    TestCase("members can be declared from outer scope", fun() =>
        assertSuccessfulMembersParse(
            "members::\n  x\n",
            listOf(nodes.memberDeclaration("x", nodes.ref("x")))
        )
    ),
    
    TestCase("members are comma separated", fun() =>
        assertSuccessfulMembersParse(
            "members::\n  x, y\n",
            listOf(
                nodes.memberDeclaration("x", nodes.ref("x")),
                nodes.memberDeclaration("y", nodes.ref("y"))
            )
        )
    ),
    
    TestCase("members can be separated by newlines", fun() =>
        assertSuccessfulMembersParse(
            "members::\n  x\n  y\n",
            listOf(
                nodes.memberDeclaration("x", nodes.ref("x")),
                nodes.memberDeclaration("y", nodes.ref("y"))
            )
        )
    ),
    
    TestCase("last member can be followed by comma", fun() =>
        assertSuccessfulMembersParse(
            "members::\n  x, y,\n",
            listOf(
                nodes.memberDeclaration("x", nodes.ref("x")),
                nodes.memberDeclaration("y", nodes.ref("y"))
            )
        )
    ),
                
    TestCase("can parse do block", fun() =>
        assertSuccessfulParse(
            "do::\n  x\n  y\n",
            nodes.doBlock(
                listOf(
                    stubStatement("x"),
                    stubStatement("y")
                )
            )
        )
    ),
                
    TestCase("can parse let-in expression", fun() =>
        assertSuccessfulParse(
            "let val x = 1 val y = 2 in z",
            nodes.letIn(
                listOf(
                    nodes.valDeclaration("x", nodes.number("1")),
                    nodes.valDeclaration("y", nodes.number("2"))
                ),
                nodes.ref("z")
            )
        )
    ),
                
    TestCase("can parse and expression", fun() =>
        assertSuccessfulParse(
            "first && second",
            nodes.and(
                nodes.ref("first"),
                nodes.ref("second")
            )
        )
    )
);
    
def stubStatement fun(name: String) =>
    nodes.expressionStatement(nodes.ref(name))

val statementRule =
    rules.sequence()
        .capture(rules.tokenOfType("identifier"))
        .next(rules.tokenOfType("newline"))
        .map(stubStatement)

val assertSuccessfulParse = createAssertSuccessfulParse(
    rules.sequence()
        .capture(expressionRules(statementRule).expression())
        .next(rules.optional(tokenRules.newline()))
        .head()
);

// TODO: members should be in their own module?
val assertSuccessfulMembersParse =
    createAssertSuccessfulParse(expressionRules(statementRule).membersRule());
