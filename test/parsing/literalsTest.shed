module shed.compiler.parsing.literalsTest;

members {
    testCases
}

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import lop.strings.createStringSource;
import lop.testing.isSuccess;

import shed.compiler.nodes;
import shed.compiler.nodes.Node;
import shed.compiler.parsing.parser.Parser;
import shed.compiler.parsing.literals;

val testCases = listOf[TestCase](
    TestCase("can parse unit", fun() =>
        assertSuccessfulParse("()", nodes.unit())
    ),
    
    TestCase("can parse number literal", fun() =>
        assertSuccessfulParse("42", nodes.number("42"))
    ),
    
    TestCase("can parse true literal", fun() =>
        assertSuccessfulParse("true", nodes.boolean(true))
    ),
    
    TestCase("can parse false literal", fun() =>
        assertSuccessfulParse("false", nodes.boolean(false))
    ),
    
    TestCase("can parse string literal", fun() =>
        assertSuccessfulParse("\"blah\"", nodes.string("blah"))
    )
);
    
def stringSource fun(string: String) =>
    createStringSource(string, "raw string");

def assertSuccessfulParse fun(input: String, expected: Node) => do {
    val source = stringSource(input);
    val result = Parser().parseWithoutEndToken(literals.literalRule, source);
    return assertThat(result, isSuccess(equalTo(expected)));
}
