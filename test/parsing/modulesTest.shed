module shed.compiler.parsing.modulesTest;

members {
    testCases
}

import options;

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import lop.strings.createStringSource;
import lop.testing.isSuccess;
import lop.rules;

import shed.compiler.nodes;
import shed.compiler.nodes.Node;
import shed.compiler.parsing.parser.Parser;
import shed.compiler.parsing.modules;

val testCases = listOf[TestCase](
    TestCase("can parse module with no statements", fun() =>
        assertSuccessfulParse(
            "",
            nodes.moduleNode(options.none, emptyList, emptyList)
        )
    ),
    
    TestCase("can parse module with statements", fun() =>
        assertSuccessfulParse(
            "x y",
            nodes.moduleNode(
                options.none,
                emptyList,
                listOf(
                    stubStatement("x"),
                    stubStatement("y")
                )
            )
        )
    )
);
    
def stubStatement fun(name: String) =>
    nodes.expressionStatement(nodes.ref(name))

val statementRule =
    rules.map(
        rules.tokenOfType("identifier"),
        stubStatement
    );
    
def stringSource fun(string: String) =>
    createStringSource(string, "raw string");

def assertSuccessfulParse fun(input: String, expected: Node) => do {
    val source = stringSource(input);
    val result = Parser().parse(modules.moduleRule(statementRule), source);
    return assertThat(result, isSuccess(equalTo(expected)));
}
