package shed.compiler.parsing;

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import lop.strings.createStringSource;
import lop.testing.isSuccess;

import shed.compiler.nodes;
import shed.compiler.nodes.Node;
import shed.compiler.parsing.Parser;
import shed.compiler.parsing.modules;

public val modulesTest = listOf[TestCase](
    TestCase("can parse module with no statements", fun() =>
        assertSuccessfulParse("", nodes.module(emptyList))
    ),
    
    TestCase("can parse module with expressionStatements", fun() =>
        assertSuccessfulParse(
            "print(\"Hello\"); print(\" world\");",
            nodes.module(listOf(
                nodes.expressionStatement(
                    nodes.call(
                        nodes.variableReference("print"),
                        listOf(nodes.string("Hello"))
                    )
                ),
                nodes.expressionStatement(
                    nodes.call(
                        nodes.variableReference("print"),
                        listOf(nodes.string(" world"))
                    )
                )
            ))
        )
    )
);
    
def stringSource fun(string: String) =>
    createStringSource(string, "raw string");
    
def parse fun(input: StringSource) =>
    Parser().parse(expressions.expression, input);

def assertSuccessfulParse fun(input: String, expected: Node) => do {
    val source = stringSource(input);
    val result = Parser().parse(modules.moduleRule, source);
    return assertThat(result, isSuccess(equalTo(expected)));
}
