module shed/compiler/parsing/modulesTest;

members {
    testCases
}

import options;

import hat.TestCase;
import duck.assertThat;
import duck.equalTo;

import lop/strings.createStringSource;
import lop/testing.isSuccess;
import lop/rules;

import shed/compiler/nodes;
import shed/compiler/nodes.Node;
import shed/compiler/parsing/parser.Parser;
import shed/compiler/parsing/modules;

val testCases = listOf[TestCase](
    TestCase("can parse module with no statements", fun() =>
        assertSuccessfulParse(
            "",
            nodes.moduleNode(options.none, emptyList, emptyList)
        )
    ),
    
    TestCase("can parse module with statements", fun() =>
        assertSuccessfulParse(
            "x y",
            nodes.moduleNode(
                options.none,
                emptyList,
                listOf(
                    stubStatement("x"),
                    stubStatement("y")
                )
            )
        )
    ),
    
    TestCase("can parse empty module with name", fun() =>
        assertSuccessfulParse(
            "module shed/example;",
            nodes.moduleNode(
                options.some(listOf("shed", "example")),
                emptyList,
                emptyList
            )
        )
    ),
    
    TestCase("can parse empty module with imports", fun() =>
        assertSuccessfulParse(
            "import shed/first; import shed/second.value;",
            nodes.moduleNode(
                options.none,
                emptyList,
                listOf(
                    nodes.importStatement(listOf("shed", "first"), emptyList),
                    nodes.importStatement(listOf("shed", "second"), listOf("value"))
                )
            )
        )
    ),
    
    TestCase("can parse module with members", fun() =>
        assertSuccessfulParse(
            "module shed/example; members import shed/first;",
            nodes.moduleNode(
                options.some(listOf("shed", "example")),
                stubMembers,
                listOf(
                    nodes.importStatement(listOf("shed", "first"), emptyList)
                )
            )
        )
    )
);
    
def stubStatement fun(name: String) =>
    nodes.expressionStatement(nodes.ref(name))

val statementRule =
    rules.map(
        rules.tokenOfType("identifier"),
        stubStatement
    );
    
val stubMembers = listOf("stub", "members");
    
val membersRule = rules.map(
    rules.optional(rules.token("keyword", "members")),
    fun(value: Option[Any]) => value.map(fun() => stubMembers).valueOrElse(fun() => emptyList)
);
    
def stringSource fun(string: String) =>
    createStringSource(string, "raw string");

def assertSuccessfulParse fun(input: String, expected: Node) => do {
    val source = stringSource(input);
    val result = Parser().parse(modules.moduleRule(statementRule, membersRule), source);
    return assertThat(result, isSuccess(equalTo(expected)));
}
