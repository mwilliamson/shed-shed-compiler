module shed.compiler.parsing.statementsTest;

members {
    testCases
}

import hat.TestCase;

import lop.rules;

import shed.compiler.nodes;
import shed.compiler.nodes.Node;
import shed.compiler.parsing.statements.statementRule;
import shed.compiler.parsing.testing.createAssertSuccessfulParse;
import shed.compiler.parsing.tokenRules;

val testCases = listOf(
    TestCase("can parse expression statement", fun() =>
        assertSuccessfulParse(
            "hello;",
            nodes.expressionStatement(nodes.ref("hello"))
        )
    ),
    
    TestCase("return statement is return keyword followed by expression", fun() =>
        assertSuccessfulParse(
            "return hello;",
            nodes.returnStatement(nodes.ref("hello"))
        )
    ),
    
    TestCase("val statement is val keyword and identifier and value", fun() =>
        assertSuccessfulParse(
            "val loneliestNumber = one;",
            nodes.valDeclaration("loneliestNumber", nodes.ref("one"))
        )
    ),
    
    TestCase("def statement is def keyword and identifier and value", fun() =>
        assertSuccessfulParse(
            "def name bob",
            nodes.definition("name", nodes.ref("bob"))
        )
    )
);

val stubExpression = rules.map(tokenRules.identifier(), nodes.ref);

val assertSuccessfulParse = createAssertSuccessfulParse(statementRule(stubExpression));
